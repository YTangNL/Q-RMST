mi <- read_excel("mi_ipd.xlsx")
revas <- read_excel("revasc_ipd.xlsx")
stroke <- read_excel("stroke_ipd.xlsx")
hosp <- read_excel("hosp_ipd.xlsx")
## Also: check the numbers of events
cvd_event <- table(cvdeath$status, cvdeath$treat)[2,]
mi_event <- table(mi$status, mi$treat)[2,]
revas_event <- table(revas$status, revas$treat)[2,]
stroke_event <- table(stroke$status, stroke$treat)[2,]
hosp_event <- table(hosp$status, hosp$treat)[2,]
t(rbind(mi_event, revas_event,cvd_event,stroke_event,hosp_event))
#####
## Second: estimate constant hazard rates for each of the events
#####
# CV death
tmp <- aggregate(cbind(time, status) ~ treat, data = cvdeath, sum)
tmp$rate <- tmp$status / tmp$time
tmp
tmp1 <- tmp
tseq <- seq(0, 42, by = 0.05)
# Plot cumulative incidence function
sf_cvd <- survfit(Surv(time, status) ~ treat, data = cvdeath)
plot(sf_cvd, fun = "event", col = c("red", "blue"), lwd = 1,
xlab = "Time (months)", ylab = "Cumulative Incidence",
main = "Incident Event Curve of CvDeath", xaxt = "n")
axis(1, at = c(0,6,12,18,24,30,36,42))
lines(tseq, 1 - exp(-tmp$rate[1] * tseq), type="l", col = "red", lty=3)
lines(tseq, 1 - exp(-tmp$rate[2] * tseq), type="l", col = "blue", lty=3)
# MI
tmp <- aggregate(cbind(time, status) ~ treat, data = mi, sum)
tmp$rate <- tmp$status / tmp$time
tmp
tmp2 <- tmp
tseq <- seq(0, 42, by = 0.05)
# Plot cumulative incidence function
sf_mi <- survfit(Surv(time, status) ~ treat, data = mi)
plot(sf_mi, fun = "event", col = c("red", "blue"), lwd = 1,
xlab = "Time (months)", ylab = "Cumulative Incidence",
main = "Incident Event Curve of MI", xaxt = "n")
axis(1, at = c(0,6,12,18,24,30,36,42))
lines(tseq, 1 - exp(-tmp$rate[1] * tseq), type="l", col = "red", lty=3)
lines(tseq, 1 - exp(-tmp$rate[2] * tseq), type="l", col = "blue", lty=3)
# Revascularization
tmp <- aggregate(cbind(time, status) ~ treat, data = revas, sum)
tmp$rate <- tmp$status / tmp$time
tmp
tmp3 <- tmp
tseq <- seq(0, 42, by = 0.05)
# Plot cumulative incidence function
sf_revas <- survfit(Surv(time, status) ~ treat, data = revas)
plot(sf_revas, fun = "event", col = c("red", "blue"), lwd = 1,
xlab = "Time (months)", ylab = "Cumulative Incidence",
main = "Incident Event Curve of Revasc.", xaxt = "n")
axis(1, at = c(0,6,12,18,24,30,36,42))
lines(tseq, 1 - exp(-tmp$rate[1] * tseq), type="l", col = "red", lty=3)
lines(tseq, 1 - exp(-tmp$rate[2] * tseq), type="l", col = "blue", lty=3)
# Stroke
tmp <- aggregate(cbind(time, status) ~ treat, data = stroke, sum)
tmp$rate <- tmp$status / tmp$time
tmp
tmp4 <- tmp
tseq <- seq(0, 42, by = 0.05)
# Plot cumulative incidence function
sf_stroke <- survfit(Surv(time, status) ~ treat, data = stroke)
plot(sf_stroke, fun = "event", col = c("red", "blue"), lwd = 1,
xlab = "Time (months)", ylab = "Cumulative Incidence",
main = "Incident Event Curve of Stroke", xaxt = "n")
axis(1, at = c(0,6,12,18,24,30,36,42))
lines(tseq, 1 - exp(-tmp$rate[1] * tseq), type="l", col = "red", lty=3)
lines(tseq, 1 - exp(-tmp$rate[2] * tseq), type="l", col = "blue", lty=3)
# 5. Hospitalization
tmp <- aggregate(cbind(time, status) ~ treat, data = hosp, sum)
tmp$rate <- tmp$status / tmp$time
tmp
tmp5 <- tmp
tseq <- seq(0, 42, by = 0.05)
# Plot cumulative incidence function
sf_hosp <- survfit(Surv(time, status) ~ treat, data = hosp)
plot(sf_hosp, fun = "event", col = c("red", "blue"), lwd = 1,
xlab = "Time (months)", ylab = "Cumulative Incidence",
main = "Incident Event Curve of Hospitalization", xaxt = "n")
axis(1, at = c(0,6,12,18,24,30,36,42))
lines(tseq, 1 - exp(-tmp$rate[1] * tseq), type="l", col = "red", lty=3)
lines(tseq, 1 - exp(-tmp$rate[2] * tseq), type="l", col = "blue", lty=3)
# We also need a censoring distribution???
#####
## Third: generate data with multiple events under assumptions
#####
# Assume that for each of the events considered, the rate of first event is
# the estimated rate of event multiplied by an (as yet unknown) constant, called a
# Also assume that for each event type, after an initial first event
# other than death, the event is double the first event rate
# maybe also need to assume another constant vector r for relapse chance
a <- 0.52
r <- c(16, 12, 5, 2)
# Now we are going to generate multiple events for each individual, according
# to these assumptions, re-estimate cumulative events and check with the original
# data
#
# Evolo
#
set.seed(2025)
n <- 13784
res1 <- matrix(NA, n, 11)
colnames(res1) <- c("id", "time1",'type1',"time2",'type2',"time3",'type3',
"time4",'type4','time5',"type5")
res1[, 1] <- 1:n
t1 <- rexp(n, rate = a * tmp1$rate[2])
t2 <- rexp(n, rate = a * tmp2$rate[2])
t3 <- rexp(n, rate = a * tmp3$rate[2])
t4 <- rexp(n, rate = a * tmp4$rate[2])
t5 <- rexp(n, rate = a * tmp5$rate[2])
tnext <- pmin(t1, t2, t3, t4, t5)
dnext <- 1
dnext[tnext == t1] <- 1
dnext[tnext == t2] <- 2
dnext[tnext == t3] <- 3
dnext[tnext == t4] <- 4
dnext[tnext == t5] <- 5
res1[, 2] <- tnext
res1[, 3] <- dnext
whnext <- which(dnext > 1)
nnext <- length(whnext)
# After first event, generate second event, except if dnext = 1
t1 <- rexp(nnext, rate = r[1] * a * tmp1$rate[2])
t2 <- rexp(nnext, rate = r[1] * a * tmp2$rate[2])
t3 <- rexp(nnext, rate = r[1] * a * tmp3$rate[2])
t4 <- rexp(nnext, rate = r[1] * a * tmp4$rate[2])
t5 <- rexp(nnext, rate = r[1] * a * tmp5$rate[2])
tnext <- pmin(t1, t2, t3, t4, t5)
dnext <- 1
dnext[tnext == t1] <- 1
dnext[tnext == t2] <- 2
dnext[tnext == t3] <- 3
dnext[tnext == t4] <- 4
dnext[tnext == t5] <- 5
res1[whnext, 4] <- res1[whnext, 2] + tnext
res1[whnext, 5] <- dnext
whnext <- whnext[dnext > 1]
nnext <- length(whnext)
# After second event, generate third event, except if dnext = 1
t1 <- rexp(nnext, rate = r[2] * a * tmp1$rate[2])
t2 <- rexp(nnext, rate = r[2]* a * tmp2$rate[2])
t3 <- rexp(nnext, rate = r[2] * a * tmp3$rate[2])
t4 <- rexp(nnext, rate = r[2] * a * tmp4$rate[2])
t5 <- rexp(nnext, rate = r[2] * a * tmp5$rate[2])
tnext <- pmin(t1, t2, t3, t4, t5)
dnext <- 1
dnext[tnext == t1] <- 1
dnext[tnext == t2] <- 2
dnext[tnext == t3] <- 3
dnext[tnext == t4] <- 4
dnext[tnext == t5] <- 5
res1[whnext, 6] <- res1[whnext, 4] + tnext
res1[whnext, 7] <- dnext
whnext <- whnext[dnext > 1]
nnext <- length(whnext)
# After third event, generate fourth event, except if dnext = 1
t1 <- rexp(nnext, rate = r[3] * a * tmp1$rate[2])
t2 <- rexp(nnext, rate = r[3] * a * tmp2$rate[2])
t3 <- rexp(nnext, rate = r[3] * a * tmp3$rate[2])
t4 <- rexp(nnext, rate = r[3] * a * tmp4$rate[2])
t5 <- rexp(nnext, rate = r[3] * a * tmp5$rate[2])
tnext <- pmin(t1, t2, t3, t4, t5)
dnext <- 1
dnext[tnext == t1] <- 1
dnext[tnext == t2] <- 2
dnext[tnext == t3] <- 3
dnext[tnext == t4] <- 4
dnext[tnext == t5] <- 5
res1[whnext, 8] <- res1[whnext, 6] + tnext
res1[whnext, 9] <- dnext
whnext <- whnext[dnext > 1]
nnext <- length(whnext)
# After fourth event, generate fifth (final) event, except if dnext = 1
t1 <- rexp(nnext, rate = r[4] * a * tmp1$rate[2])
t2 <- rexp(nnext, rate = r[4] * a * tmp2$rate[2])
t3 <- rexp(nnext, rate = r[4] * a * tmp3$rate[2])
t4 <- rexp(nnext, rate = r[4] * a * tmp4$rate[2])
t5 <- rexp(nnext, rate = r[4] * a * tmp5$rate[2])
tnext <- pmin(t1, t2, t3, t4, t5)
dnext <- 1
dnext[tnext == t1] <- 1
dnext[tnext == t2] <- 2
dnext[tnext == t3] <- 3
dnext[tnext == t4] <- 4
dnext[tnext == t5] <- 5
res1[whnext, 10] <- res1[whnext, 8] + tnext
res1[whnext, 11] <- dnext
#####
## Fourth: Censor data
#####
#
# evolo
#
# censor first event
res1 <- data.frame(res1)
res11 <- subset(res1, res1$time1 < 36)
n_1st <- nrow(res11)
n_1st
count_1st <- table(res11$type1)
# censor second event
res12 <- subset(res1,res1$time2 < 36)
n_2nd <- nrow(res12)
n_2nd
count_2nd <- table(res12$type2)
# censor third event
res13 <- subset(res1,res1$time3 < 36)
n_3rd <- nrow(res13)
n_3rd
count_3rd <- table(res13$type3)
# censor fourth event
res14 <- subset(res1,res1$time4 < 36)
n_4th <- nrow(res14)
n_4th
count_4th <- table(res14$type4)
# censor fifth event
res15 <- subset(res1,res1$time5 < 36)
n_5th <- nrow(res15)
n_5th
count_5th <- table(res15$type5)
censor_evo <- distinct(rbind(res11, res12, res13, res14, res15))
write_xlsx(censor_evo,"censor_evo.xlsx")
#####
## Fifth: Extract Key counting numbers
#####
# Numbers from the clinical report
ncum_repo_evo <- c(251,468,759,207,236)
n1_repo_evo <- c(161,329,349,184,169)
n_event_repo_evo <- c(768,417,159)
# Numbers from simulation
n_1st
n_total_evo <- n_1st + n_2nd + n_3rd + n_4th + n_5th
n_1event_evo <- n_1st - n_2nd
n_2event_evo <- n_2nd - n_3rd
n_3event_evo <- n_3rd - n_4th
n_4event_evo <- n_4th - n_5th
n_5event_evo <- n_5th
n_3pevent_evo <- n_3event_evo + n_4event_evo + n_5event_evo
n_events_sim = c(n_1event_evo,n_2event_evo,n_3pevent_evo)
count_sim <- rbind(count_1st,count_2nd, count_3rd,count_4th,count_5th)
count_cum_sim <- colSums(count_sim)
# output a comparison table
compare_evo <- data.frame(cumu_events = c(ncum_repo_evo,2192),
cumu_sim = c(count_cum_sim,sum(count_cum_sim)),
first_event = c(n1_repo_evo,1344),
first_sim = c(as.matrix(count_1st),sum(count_1st)),
row.names = c("cvd", "mi", "revasc.","stroke", "hospital.","Total"))
compare_sub <- data.frame (report = n_event_repo_evo,
sim = n_events_sim,
row.names = c("subjets with 1 event", "subjets with 2 events", "subjets with 3+ event"))
library(tidyverse)
library(readxl)
library(survival)
library(writexl)
#####
## First: check whether we can reconstruct the original (incorrect!) one minus Kaplan-Meiers
#####
cvdeath <- read_excel("cvd_ipd.xlsx")
mi <- read_excel("mi_ipd.xlsx")
revas <- read_excel("revasc_ipd.xlsx")
stroke <- read_excel("stroke_ipd.xlsx")
hosp <- read_excel("hosp_ipd.xlsx")
## Also: check the numbers of events
cvd_event <- table(cvdeath$status, cvdeath$treat)[2,]
mi_event <- table(mi$status, mi$treat)[2,]
revas_event <- table(revas$status, revas$treat)[2,]
stroke_event <- table(stroke$status, stroke$treat)[2,]
hosp_event <- table(hosp$status, hosp$treat)[2,]
t(rbind(mi_event, revas_event,cvd_event,stroke_event,hosp_event))
#####
## Second: estimate constant hazard rates for each of the events
#####
# CV death
tmp <- aggregate(cbind(time, status) ~ treat, data = cvdeath, sum)
tmp$rate <- tmp$status / tmp$time
tmp
tmp1 <- tmp
tseq <- seq(0, 42, by = 0.05)
# Plot cumulative incidence function
sf_cvd <- survfit(Surv(time, status) ~ treat, data = cvdeath)
plot(sf_cvd, fun = "event", col = c("red", "blue"), lwd = 1,
xlab = "Time (months)", ylab = "Cumulative Incidence",
main = "Incident Event Curve of CvDeath", xaxt = "n")
axis(1, at = c(0,6,12,18,24,30,36,42))
lines(tseq, 1 - exp(-tmp$rate[1] * tseq), type="l", col = "red", lty=3)
lines(tseq, 1 - exp(-tmp$rate[2] * tseq), type="l", col = "blue", lty=3)
# MI
tmp <- aggregate(cbind(time, status) ~ treat, data = mi, sum)
tmp$rate <- tmp$status / tmp$time
tmp
tmp2 <- tmp
tseq <- seq(0, 42, by = 0.05)
# Plot cumulative incidence function
sf_mi <- survfit(Surv(time, status) ~ treat, data = mi)
plot(sf_mi, fun = "event", col = c("red", "blue"), lwd = 1,
xlab = "Time (months)", ylab = "Cumulative Incidence",
main = "Incident Event Curve of MI", xaxt = "n")
axis(1, at = c(0,6,12,18,24,30,36,42))
lines(tseq, 1 - exp(-tmp$rate[1] * tseq), type="l", col = "red", lty=3)
lines(tseq, 1 - exp(-tmp$rate[2] * tseq), type="l", col = "blue", lty=3)
# Revascularization
tmp <- aggregate(cbind(time, status) ~ treat, data = revas, sum)
tmp$rate <- tmp$status / tmp$time
tmp
tmp3 <- tmp
tseq <- seq(0, 42, by = 0.05)
# Plot cumulative incidence function
sf_revas <- survfit(Surv(time, status) ~ treat, data = revas)
plot(sf_revas, fun = "event", col = c("red", "blue"), lwd = 1,
xlab = "Time (months)", ylab = "Cumulative Incidence",
main = "Incident Event Curve of Revasc.", xaxt = "n")
axis(1, at = c(0,6,12,18,24,30,36,42))
lines(tseq, 1 - exp(-tmp$rate[1] * tseq), type="l", col = "red", lty=3)
lines(tseq, 1 - exp(-tmp$rate[2] * tseq), type="l", col = "blue", lty=3)
# Stroke
tmp <- aggregate(cbind(time, status) ~ treat, data = stroke, sum)
tmp$rate <- tmp$status / tmp$time
tmp
tmp4 <- tmp
tseq <- seq(0, 42, by = 0.05)
# Plot cumulative incidence function
sf_stroke <- survfit(Surv(time, status) ~ treat, data = stroke)
plot(sf_stroke, fun = "event", col = c("red", "blue"), lwd = 1,
xlab = "Time (months)", ylab = "Cumulative Incidence",
main = "Incident Event Curve of Stroke", xaxt = "n")
axis(1, at = c(0,6,12,18,24,30,36,42))
lines(tseq, 1 - exp(-tmp$rate[1] * tseq), type="l", col = "red", lty=3)
lines(tseq, 1 - exp(-tmp$rate[2] * tseq), type="l", col = "blue", lty=3)
# 5. Hospitalization
tmp <- aggregate(cbind(time, status) ~ treat, data = hosp, sum)
tmp$rate <- tmp$status / tmp$time
tmp
tmp5 <- tmp
tseq <- seq(0, 42, by = 0.05)
# Plot cumulative incidence function
sf_hosp <- survfit(Surv(time, status) ~ treat, data = hosp)
plot(sf_hosp, fun = "event", col = c("red", "blue"), lwd = 1,
xlab = "Time (months)", ylab = "Cumulative Incidence",
main = "Incident Event Curve of Hospitalization", xaxt = "n")
axis(1, at = c(0,6,12,18,24,30,36,42))
lines(tseq, 1 - exp(-tmp$rate[1] * tseq), type="l", col = "red", lty=3)
lines(tseq, 1 - exp(-tmp$rate[2] * tseq), type="l", col = "blue", lty=3)
# We also need a censoring distribution???
#####
## Third: generate data with multiple events under assumptions
#####
# Assume that for each of the events considered, the rate of first event is
# the estimated rate of event multiplied by an (as yet unknown) constant, called a
# Also assume that for each event type, after an initial first event
# other than death, the event is double the first event rate
# maybe also need to assume another constant vector r for relapse chance
a <- 0.50
r <- c(16, 10, 5, 2)
# Now we are going to generate multiple events for each individual, according
# to these assumptions, re-estimate cumulative events and check with the original
# data
#
# Placebo
#
set.seed(2025)
n <- 13780
res <- matrix(NA, n, 11)
colnames(res) <- c("id", "time1",'type1',"time2",'type2',"time3",'type3',
"time4",'type4','time5',"type5")
res[, 1] <- 1:n
t1 <- rexp(n, rate = a * tmp1$rate[1])
t2 <- rexp(n, rate = a * tmp2$rate[1])
t3 <- rexp(n, rate = a * tmp3$rate[1])
t4 <- rexp(n, rate = a * tmp4$rate[1])
t5 <- rexp(n, rate = a * tmp5$rate[1])
tnext <- pmin(t1, t2, t3, t4, t5)
dnext <- 1
dnext[tnext == t1] <- 1
dnext[tnext == t2] <- 2
dnext[tnext == t3] <- 3
dnext[tnext == t4] <- 4
dnext[tnext == t5] <- 5
res[, 2] <- tnext
res[, 3] <- dnext
whnext <- which(dnext > 1)
nnext <- length(whnext)
# After first event, generate second event, except if dnext = 1
t1 <- rexp(nnext, rate = r[1] * a * tmp1$rate[1])
t2 <- rexp(nnext, rate = r[1] * a * tmp2$rate[1])
t3 <- rexp(nnext, rate = r[1] * a * tmp3$rate[1])
t4 <- rexp(nnext, rate = r[1] * a * tmp4$rate[1])
t5 <- rexp(nnext, rate = r[1] * a * tmp5$rate[1])
tnext <- pmin(t1, t2, t3, t4, t5)
dnext <- 1
dnext[tnext == t1] <- 1
dnext[tnext == t2] <- 2
dnext[tnext == t3] <- 3
dnext[tnext == t4] <- 4
dnext[tnext == t5] <- 5
res[whnext, 4] <- res[whnext, 2] + tnext
res[whnext, 5] <- dnext
whnext <- whnext[dnext > 1]
nnext <- length(whnext)
# After second event, generate third event, except if dnext = 1
t1 <- rexp(nnext, rate = r[2] * a * tmp1$rate[1])
t2 <- rexp(nnext, rate = r[2]* a * tmp2$rate[1])
t3 <- rexp(nnext, rate = r[2] * a * tmp3$rate[1])
t4 <- rexp(nnext, rate = r[2] * a * tmp4$rate[1])
t5 <- rexp(nnext, rate = r[2] * a * tmp5$rate[1])
tnext <- pmin(t1, t2, t3, t4, t5)
dnext <- 1
dnext[tnext == t1] <- 1
dnext[tnext == t2] <- 2
dnext[tnext == t3] <- 3
dnext[tnext == t4] <- 4
dnext[tnext == t5] <- 5
res[whnext, 6] <- res[whnext, 4] + tnext
res[whnext, 7] <- dnext
whnext <- whnext[dnext > 1]
nnext <- length(whnext)
# After third event, generate fourth event, except if dnext = 1
t1 <- rexp(nnext, rate = r[3] * a * tmp1$rate[1])
t2 <- rexp(nnext, rate = r[3] * a * tmp2$rate[1])
t3 <- rexp(nnext, rate = r[3] * a * tmp3$rate[1])
t4 <- rexp(nnext, rate = r[3] * a * tmp4$rate[1])
t5 <- rexp(nnext, rate = r[3] * a * tmp5$rate[1])
tnext <- pmin(t1, t2, t3, t4, t5)
dnext <- 1
dnext[tnext == t1] <- 1
dnext[tnext == t2] <- 2
dnext[tnext == t3] <- 3
dnext[tnext == t4] <- 4
dnext[tnext == t5] <- 5
res[whnext, 8] <- res[whnext, 6] + tnext
res[whnext, 9] <- dnext
whnext <- whnext[dnext > 1]
nnext <- length(whnext)
# After fourth event, generate fifth (final) event, except if dnext = 1
t1 <- rexp(nnext, rate = r[4] * a * tmp1$rate[1])
t2 <- rexp(nnext, rate = r[4] * a * tmp2$rate[1])
t3 <- rexp(nnext, rate = r[4] * a * tmp3$rate[1])
t4 <- rexp(nnext, rate = r[4] * a * tmp4$rate[1])
t5 <- rexp(nnext, rate = r[4] * a * tmp5$rate[1])
tnext <- pmin(t1, t2, t3, t4, t5)
dnext <- 1
dnext[tnext == t1] <- 1
dnext[tnext == t2] <- 2
dnext[tnext == t3] <- 3
dnext[tnext == t4] <- 4
dnext[tnext == t5] <- 5
res[whnext, 10] <- res[whnext, 8] + tnext
res[whnext, 11] <- dnext
#####
## Fourth: Censor data
#####
#
# placebo
#
# censor first event
res <- data.frame(res)
res1 <- subset(res, res$time1 < 36)
n_1st <- nrow(res1)
n_1st
count_1st <- table(res1$type1)
# censor second event
res2 <- subset(res,res$time2 < 36)
n_2nd <- nrow(res2)
n_2nd
count_2nd <- table(res2$type2)
# censor third event
res3 <- subset(res,res$time3 < 36)
n_3rd <- nrow(res3)
n_3rd
count_3rd <- table(res3$type3)
# censor fourth event
res4 <- subset(res,res$time4 < 36)
n_4th <- nrow(res4)
n_4th
count_4th <- table(res4$type4)
# censor fifth event
res5 <- subset(res,res$time5 < 36)
n_5th <- nrow(res5)
n_5th
count_5th <- table(res5$type5)
censor_pla <- distinct(rbind(res1, res2, res3, res4, res5))
write_xlsx(censor_pla,"censor_pla.xlsx")
n_total_pla <- n_1st + n_2nd + n_3rd + n_4th + n_5th
n_total_pla
#####
## Fifth: Extract Key counting numbers
#####
# Numbers from the clinical report
ncum_repo_pla <- c(240,639,965,262,239)
n1_repo_pla <- c(142,423,394,226,160)
n_event_repo_pla <- c(806,543,214)
# Numbers from simulation
n_1st
n_total_pla <- n_1st + n_2nd + n_3rd + n_4th + n_5th
n_1event_pla <- n_1st - n_2nd
n_2event_pla <- n_2nd - n_3rd
n_3event_pla <- n_3rd - n_4th
n_4event_pla <- n_4th - n_5th
n_5event_pla <- n_5th
n_3pevent_pla <- n_3event_pla + n_4event_pla + n_5event_pla
n_events_sim = c(n_1event_pla,n_2event_pla,n_3pevent_pla)
count_sim <- rbind(count_1st,count_2nd, count_3rd,count_4th,count_5th)
count_cum_sim <- colSums(count_sim)
# output a comparison table
compare_pla <- data.frame(cumu_events = c(ncum_repo_pla,2712),
cumu_sim = c(count_cum_sim,sum(count_cum_sim)),
first_event = c(n1_repo_pla,1563),
first_sim = c(as.matrix(count_1st),sum(count_1st)),
row.names = c("cvd", "mi", "revasc.","stroke", "hospital.","Total"))
compare_sub <- data.frame (report = n_event_repo_pla,
sim = n_events_sim,
row.names = c("subjets with 1 event", "subjets with 2 events", "subjets with 3+ event"))
